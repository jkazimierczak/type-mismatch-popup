generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_DIRECT_URL")
  extensions = [pgcrypto]
}

model Quiz {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publicId   String
  name       String
  visibility Visibility @default(PRIVATE)

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_author")
  authorId String

  questions Question[]
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Question {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String
  questionType QuestionType

  // Relations
  quiz   Quiz   @relation(fields: [quizId], references: [id], map: "fk_quiz")
  quizId String @db.Uuid

  answers Answer[]
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Answer {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answer    String
  isCorrect Boolean

  // Relations
  questions  Question @relation(fields: [questionId], references: [id], map: "fk_question")
  questionId String   @db.Uuid
}

model User {
  // Next-auth fields
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Custom fields
  modified_at DateTime? @default(now())
  quizzes     Quiz[]
}

// Next-Auth models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
