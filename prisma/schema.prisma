generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Answers {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId          String                @db.Uuid
  answer              String
  isCorrect           Boolean
  questions           Questions             @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question")
  testAttemptsAnswers TestAttemptsAnswers[]
}

model Profiles {
  id                String              @id @db.Uuid
  updatedAt         DateTime?           @db.Timestamptz(6)
  username          String?             @unique
  avatarUrl         String?
  firstName         String?
  lastName          String?
  quizzes           Quizzes[]
  quizzesAccessList QuizzesAccessList[]
  testAttempts      TestAttempts[]
}

model QuestionTypes {
  id        Int         @id @default(autoincrement())
  name      String
  questions Questions[]
}

model Questions {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quizId         String        @db.Uuid
  question       String
  questionTypeId Int
  answers        Answers[]
  questionTypes  QuestionTypes @relation(fields: [questionTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question_type")
  quizzes        Quizzes       @relation(fields: [quizId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_quiz")
}

model Quizzes {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  authorId          String              @db.Uuid
  visibilityId      Int
  questions         Questions[]
  profiles          Profiles            @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_author")
  visibilities      Visibilities        @relation(fields: [visibilityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_visibility")
  quizzesAccessList QuizzesAccessList[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
}

model QuizzesAccessList {
  userId    String    @db.Uuid
  quizId    String    @db.Uuid
  expiresOn DateTime? @db.Timestamp(6)
  quizzes   Quizzes   @relation(fields: [quizId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles  Profiles  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User      @relation(fields: [userId], references: [id])

  @@id([userId, quizId])
}

model TestAttempts {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String                @db.Uuid
  quizId              String                @db.Uuid
  startedOn           DateTime              @db.Timestamp(6)
  finishedOn          DateTime?             @db.Timestamp(6)
  profiles            Profiles              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  testAttemptsAnswers TestAttemptsAnswers[]
  User                User                  @relation(fields: [userId], references: [id])
}

model TestAttemptsAnswers {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  testAttemptId String       @db.Uuid
  answerId      String       @db.Uuid
  isChecked     Boolean?
  answers       Answers      @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_answer")
  testAttempts  TestAttempts @relation(fields: [testAttemptId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_test_attempt")
}

model Visibilities {
  id         Int       @id @default(autoincrement())
  visibility String
  quizzes    Quizzes[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  modified_at       DateTime?           @default(now())
  quizzes           Quizzes[]
  quizzesAccessList QuizzesAccessList[]
  testAttempts      TestAttempts[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
